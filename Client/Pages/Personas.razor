@page "/personas"
@layout MainLayout
@using SMI.Client.Shared.Components
@using SMI.Client.Models
@inject PersonaServiceClient PersonaService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject HttpClient Http

<link rel="stylesheet" href="css/tablagestion.css" />

<h3 class="mb-4">Gestión de Personas</h3>

<TablaGestion TituloTabla="Personas"
Columnas="ColumnasPersonas"
OpcionesBusqueda="ColumnasPersonas"
TiposDocumento="listaTipoDocumentos"
BuscarCallback="BuscarHandler"
AgregarCallback="@EventCallback.Factory.Create(this, AgregarPersona)"
LimpiarCallback="@EventCallback.Factory.Create(this, LimpiarBusqueda)"
RenderAcciones="RenderAccionesPersonas"
@ref="tabla" />

<TablaGestion ... />

@if (mostrarCard && personaSeleccionada != null)
{
    <div class="modal fade show d-flex align-items-center justify-content-center"
         tabindex="-1"
         style="background-color: rgba(0,0,0,0.5); position: fixed; top: 0; left: 0; width: 100vw; height: 100vh; z-index: 1050;"
         role="dialog">

        <div style="width: 90vw; height: 90vh; display: flex; justify-content: center; align-items: center;">
            <div class="modal-content"
                 style="width: 100%; height: 100%; display: flex; flex-direction: column; max-width: 1100px;">
                <div class="modal-header">
                    <h5 class="modal-title">Información de la Persona</h5>
                    <button type="button" class="btn-close" @onclick="() => mostrarCard = false"></button>
                </div>
                <div class="modal-body" style="overflow-y: auto; flex-grow: 1;">
                    <PersonaCard persona="personaSeleccionada" />
                </div>
            </div>
        </div>
    </div>
}













@code {
    private EventCallback<string[]> BuscarHandler => EventCallback.Factory.Create<string[]>(this, Buscar);

    private TablaGestion tabla;

    private List<string> ColumnasPersonas = new()
    {
        "Primer Nombre", "Segundo Nombre", "Primer Apellido", "Segundo Apellido", "Cédula de Identidad", "Acciones"
    };

    private PersonaDto personaSeleccionada;
	private bool mostrarCard = false;

	private List<TipoDocumentoDTO> listaTipoDocumentos = new();
    private List<PersonaDto> listaPersonas = new();
    private List<List<string>> DatosPersonas = new();
    private List<List<string>> DatosFiltrados = new();

    protected override async Task OnInitializedAsync()
    {
		listaTipoDocumentos = await Http.GetFromJsonAsync<List<TipoDocumentoDTO>>("tipos-documento");

        await CargarDatosPersonas();
        await tabla.CargarRegistros(DatosPersonas.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
    }

    private async Task CargarDatosPersonas()
    {
        listaPersonas = await PersonaService.GetAllPersonas();

        DatosPersonas = listaPersonas.Select(p => new List<string>
    {
        p.nombre ?? "",
        p.nombre2 ?? "",
        p.apellido ?? "",
        p.apellido2 ?? "",
        (p.documento?.id_TipoDocumento == 1) ? (p.documento.numeroDocumento ?? "") : "",
        p.fechaNacimiento.ToString("yyyy-MM-dd"),
        p.correo ?? "",
        p.direccion?.FirstOrDefault()?.callePrincipal ?? "",
        p.direccion?.FirstOrDefault()?.calleSecundaria1 ?? "",
        p.direccion?.FirstOrDefault()?.calleSecundaria2 ?? "",
        p.direccion?.FirstOrDefault()?.numeroCasa ?? "",
        p.direccion?.FirstOrDefault()?.referencia ?? "",
        p.telefono?.celular ?? "",
        p.telefono?.convencional ?? "",
        p.estadoCivil?.nombre ?? "",
        p.segurosMedicos?.FirstOrDefault()?.nombre ?? "",
        p.documento?.numeroDocumento ?? "",
        p.documento?.nombreTipoDocumento ?? "",
        p.lateralidad?.nombreLateralidad ?? "",
        p.religion?.nombre ?? "",
        p.lugarResidencia?.nombreCiudad ?? "",
        p.lugarResidencia?.nombreProvincia ?? "",
        p.profesionalSalud?.nombreTipoProfesional ?? "",
        p.profesionalSalud?.numeroRegistro ?? "",
        p.grupoSanguineo?.nombre ?? "",
        p.profesiones?.FirstOrDefault()?.nombre ?? "",
        p.actividadLaboral?.FirstOrDefault()?.nombre ?? "",
        p.instruccion?.nombre ?? "",
        p.id.ToString()
    }).ToList();
    }


    private async Task Buscar(string[] datos)
    {
        string campo = datos[0];
        string valor = datos[1]?.Trim().ToLower() ?? "";

        if (string.IsNullOrEmpty(campo) || string.IsNullOrEmpty(valor))
        {
            await tabla.CargarRegistros(DatosPersonas.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
            return;
        }

        int indice = ColumnasPersonas.IndexOf(campo);
        if (indice < 0) return;

        if (campo == "Cédula de Identidad") // o "Tipo de Documento"
        {
            // Buscar por tipo de documento (ID o nombre)
            DatosFiltrados = DatosPersonas
                .Where(row => row[indice].Equals(valor, StringComparison.OrdinalIgnoreCase))
                .Select(r => r.Concat(new[] { r[0] }).ToList())
                .ToList();
        }
        else
        {
            // Búsqueda normal por texto
            DatosFiltrados = DatosPersonas
                .Where(row => row[indice].ToLower().Contains(valor))
                .Select(r => r.Concat(new[] { r[0] }).ToList())
                .ToList();
        }

        await tabla.CargarRegistros(DatosFiltrados);
    }


    private Task AgregarPersona()
    {
        Navigation.NavigateTo("/persona/nueva");
        return Task.CompletedTask;
    }

    private async Task LimpiarBusqueda()
    {
        await tabla.CargarRegistros(DatosPersonas.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
    }

    RenderFragment<List<string>> RenderAccionesPersonas => fila => builder =>
    {
        int seq = 0;
        var id = fila[28];

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-info me-1");
        builder.AddAttribute(seq++, "title", "Ver");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => VerPersona(id)));
        builder.AddContent(seq++, "Ver");
        builder.CloseElement();

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-warning me-1");
        builder.AddAttribute(seq++, "title", "Editar");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => EditarPersona(id)));
        builder.AddContent(seq++, "Editar");
        builder.CloseElement();

        builder.OpenElement(seq++, "button");
        builder.AddAttribute(seq++, "class", "btn btn-sm btn-danger");
        builder.AddAttribute(seq++, "title", "Eliminar");
        builder.AddAttribute(seq++, "onclick", EventCallback.Factory.Create(this, () => EliminarPersona(id)));
        builder.AddContent(seq++, "Eliminar");
        builder.CloseElement();
    };

    private void VerPersona(string id)
    {
		personaSeleccionada = listaPersonas.FirstOrDefault(p => p.id.ToString() == id);

		if (personaSeleccionada == null)
		{
			JS.InvokeVoidAsync("alert", $"No se encontró la persona con ID: {id}");
			return;
		}
		mostrarCard = true;
    }

    private void EditarPersona(string id)
    {
        Navigation.NavigateTo($"/persona/editar/{id}");
    }

    private async Task EliminarPersona(string id)
    {
        if (!int.TryParse(id, out int idInt))
        {
            await JS.InvokeVoidAsync("alert", "ID inválido");
            return;
        }

        var persona = listaPersonas.FirstOrDefault(p => p.id == idInt);
        if (persona == null)
        {
            await JS.InvokeVoidAsync("alert", $"No se encontró la persona con ID: {id}");
            return;
        }

        bool confirmado = await JS.InvokeAsync<bool>("confirm", $"¿Estás seguro de eliminar a {persona.nombre}?");
        if (confirmado)
        {
            bool eliminado = await PersonaService.DeletePersona(idInt);
            if (eliminado)
            {
                await JS.InvokeVoidAsync("alert", "Persona eliminada correctamente");
                await CargarDatosPersonas();
                await tabla.CargarRegistros(DatosPersonas.Select(d => d.Concat(new[] { d[0] }).ToList()).ToList());
            }
            else
            {
                await JS.InvokeVoidAsync("alert", "Ocurrió un error al eliminar");
            }
        }
    }
}
