@page "/login"
@layout LoginLayout
@inject HttpClient Http
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<h3 class="mb-4 text-center">Iniciar sesión</h3>

<div class="form-group mb-3">
    <label for="correo">Correo</label>
    <input @bind="loginRequest.Correo" class="form-control" id="correo" placeholder="Correo electrónico" />
    @if (showCorreoError)
    {
        <div class="form-text text-muted">Por favor ingrese su correo.</div>
    }
</div>

<div class="form-group mb-3">
    <label for="clave">Contraseña</label>
    <div class="input-group">
        <input @bind="loginRequest.Clave" type="@passwordInputType" class="form-control" id="clave" placeholder="Contraseña" />
        <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility" title="Mostrar/Ocultar">
            <span class="oi @(passwordInputType == "password" ? "oi-eye" : "oi-eye-slash")"></span>
        </button>
    </div>
    @if (showClaveError)
    {
        <div class="form-text text-muted">Por favor ingrese su contraseña.</div>
    }
</div>

<button class="btn btn-primary w-100 mt-2" @onclick="IniciarSesion">Ingresar</button>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-warning mt-3" role="alert">
        @errorMessage
    </div>
}

@code {
    private SMI.Shared.DTOs.LoginRequestDTO loginRequest = new();
    private string errorMessage;
    private string passwordInputType = "password";
    private bool showCorreoError = false;
    private bool showClaveError = false;

    private async Task IniciarSesion()
    {
        showCorreoError = string.IsNullOrWhiteSpace(loginRequest.Correo);
        showClaveError = string.IsNullOrWhiteSpace(loginRequest.Clave);

        if (showCorreoError || showClaveError)
        {
            errorMessage = "";
            return;
        }

        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                var usuario = await response.Content.ReadFromJsonAsync<SMI.Shared.DTOs.LoginResponseDTO>();

                // Guarda el nombre en localStorage si quieres usarlo en la app
                if (usuario is not null)
                {
                    await LocalStorage.SetItemAsync("usuarioNombre", usuario.NombreCompleto);
                }

                Navigation.NavigateTo("/home");
            }
            else
            {
                // Aquí podrías parsear mejor el error si viene en JSON
                errorMessage = "Correo o clave inválidos, o usuario inactivo.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Error al intentar iniciar sesión: " + ex.Message;
        }
    }

    private void TogglePasswordVisibility()
    {
        passwordInputType = passwordInputType == "password" ? "text" : "password";
    }
}
